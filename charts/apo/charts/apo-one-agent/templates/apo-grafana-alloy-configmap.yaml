apiVersion: v1
kind: ConfigMap
metadata:
  name: apo-grafana-alloy-config
  labels:
    {{- include "apo-one-agent.labels" . | nindent 4 }}
data:
  config.alloy: |-
    logging {
      level  = "info"
      format = "logfmt"
    }


    otelcol.receiver.prometheus "default" {
      output {
      metrics = [otelcol.exporter.otlp.default.input]
      }
    }

    otelcol.exporter.otlp "default" {
      client {
        endpoint = "{{ .Values.grafanaAlloy.config.apoOtelCollectorGrpcUrl }}"
        tls {
            insecure = true
            insecure_skip_verify = true
        }
      }
    }

    prometheus.relabel "example" {
        forward_to = [otelcol.receiver.prometheus.default.receiver]

        rule {
            action       = "replace"
            source_labels = ["instance"]
            target_label = "instance_name"
        }
        rule {
            action       = "replace"
            source_labels = ["job"]
            target_label = "job_name"
        }
    }

    prometheus.exporter.unix "local_system" {
    }

    prometheus.scrape "agent_metrics" {
      targets = [
        {
          __address__ = "localhost:9500",
        },
        {
          __address__ = "localhost:9408",
        },
        {
          __address__ = "localhost:9499",
        },
        ]
      forward_to = [otelcol.receiver.prometheus.default.receiver]
      scrape_interval = "10s"
    }

    prometheus.scrape "scrape_metrics" {
      targets = prometheus.exporter.unix.local_system.targets
      forward_to = [prometheus.relabel.example.receiver]
      scrape_interval = "10s"
    }

    prometheus.scrape "k8s_metrics" {
      targets = [
        {
          __address__ = format("%s:10250", env("MY_NODE_IP")),
          __metrics_path__ = "/metrics/cadvisor",
          job = "integrations/kubernetes/cadvisor",
          node_name = env("HOSTNAME"),
        },
        {
          __address__ = format("%s:10250", env("MY_NODE_IP")),
          job = "integrations/kubernetes/kubelet",
          node_name = env("HOSTNAME"),
        },
      ]
      scheme     = "https"
      scrape_interval = "60s"
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        insecure_skip_verify = true
      }
      forward_to = [prometheus.relabel.example.receiver]
    }