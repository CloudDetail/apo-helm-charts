apiVersion: v1
kind: ConfigMap
metadata:
  name: apo-grafana-alloy-config
  labels:
    {{- include "apo-one-agent.labels" . | nindent 4 }}
data:
  config.alloy: |-
    logging {
      level  = "info"
      format = "logfmt"
    }


    otelcol.receiver.prometheus "default" {
      output {
      metrics = [otelcol.exporter.otlp.default.input]
      }
    }

    otelcol.exporter.otlp "default" {
      client {
        endpoint = "{{ .Values.grafanaAlloy.config.apoOtelCollectorGrpcUrl }}"
        tls {
            insecure = true
            insecure_skip_verify = true
        }
      }
    }

    prometheus.relabel "example" {
        forward_to = [otelcol.receiver.prometheus.default.receiver]

        rule {
            action       = "replace"
            source_labels = ["instance"]
            target_label = "instance_name"
        }
        rule {
            action       = "replace"
            source_labels = ["job"]
            target_label = "job_name"
        }
    }

    prometheus.exporter.unix "local_system" {
    }

    prometheus.scrape "agent_metrics" {
      targets = [
        {
          __address__ = "localhost:9500",
        },
        {
          __address__ = "localhost:9408",
        },
        {
          __address__ = "localhost:9499",
        },
        ]
      forward_to = [otelcol.receiver.prometheus.default.receiver]
      scrape_interval = "10s"
    }

    prometheus.scrape "scrape_metrics" {
      targets = prometheus.exporter.unix.local_system.targets
      forward_to = [prometheus.relabel.example.receiver]
      scrape_interval = "10s"
    }

    discovery.kubernetes "nodes" {
      role = "node"
    }

    discovery.relabel "kubelet" {
      targets = discovery.kubernetes.nodes.targets
    }

    prometheus.scrape "kubelet" {
      job_name   = "integrations/kubernetes/kubelet"
      targets  = discovery.relabel.kubelet.output
      scheme   = "https"
      scrape_interval = "60s"
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        insecure_skip_verify = true
      }
      clustering {
        enabled = true
      }
      forward_to = [prometheus.relabel.example.receiver]
    }

    discovery.relabel "cadvisor" {
      targets = discovery.kubernetes.nodes.targets
      rule {
        replacement   = "/metrics/cadvisor"
        target_label  = "__metrics_path__"
      }
    }

    prometheus.scrape "cadvisor" {
      job_name   = "integrations/kubernetes/cadvisor"
      targets    = discovery.relabel.cadvisor.output
      scheme     = "https"
      scrape_interval = "60s"
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        insecure_skip_verify = true
      }
      clustering {
        enabled = true
      }
      forward_to = [prometheus.relabel.example.receiver]
    }