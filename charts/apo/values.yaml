global:
  edition: ee
  image:
    # kindlingx official mirror repository: registry.cn-hangzhou.aliyuncs.com/kindlingx
    repository: "registry.cn-hangzhou.aliyuncs.com/kindlingx"
    eeRepository: "registry.cn-hangzhou.aliyuncs.com/kindlingx"
    pullPolicy: "Always"

  # APO采集模式
  # - trace 全量采集，自动注入Trace采集探针
  # - trace-collcetor 使用 collector 接受外部探针Trace数据
  # - trace-sidecar 不接受外部Trace数据，直接从外部API中读取数据，使用本模式需要配置外部API数据源
  # - metrics 全量采集指标数据
  # - log 全量日志采集，故障现场日志采集
  # - log-sample 故障现场日志采集，不采集全量日志
  agentCollectorMode:
    - trace
    - metrics
    - log
  victoriaMetricsUrl: "http://apo-victoria-metrics-single-server-svc:8428"
  clickhouseUrl: "apo-clickhouse-svc:9000"
  clickhouseHttpUrl: "apo-clickhouse-svc:8123"
  clickhouseRootUsername: admin
  clickhouseRootPassword: "WPKf-e9U.X)K)ezTDo9#"
  clickhouseDatabase: "apo"
  clickhouseClusterName: ""
  clickhouseReplication: "false"
  deepflow:
    enabled: false
    mysql:
      address: "deepflow-mysql:30130"
      username: root
      password: deepflow
      dbname: deepflow
    clickhouse:
      address: "deepflow-clickhouse:9000"
      username: ""
      password: ""

apo-backend:
  enabled: true
  initImage:
    repository: "{{ .Values.global.image.repository }}/busybox"
    pullPolicy: "{{ .Values.global.image.pullPolicy }}"
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.36.1"
  apoBackend:
    image:
      registry: "{{ .Values.global.image.repository }}"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
      # Overrides the image tag whose default is the chart appVersion.
      tag: "v1.0.0"
    # resources:
    #   limits:
    #     cpu: 1000m
    #     memory: 1024Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
  apoPolarisAnalyzer:
    image:
      repository: "{{ .Values.global.image.repository }}/polaris-analyzer"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
      # Overrides the image tag whose default is the chart appVersion.
      tag: "v1.0.0"
    # resources:
    #   limits:
    #     cpu: 1000m
    #     memory: 1024Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
  service:
    type: NodePort
    nodePort: 31363
  config:
    victoriaMetricsUrl: "{{ .Values.global.victoriaMetricsUrl }}"
    clickhouseUrl: "{{ .Values.global.clickhouseUrl }}"
    clickhouseUsername: "{{ .Values.global.clickhouseRootUsername }}"
    clickhousePassword: "{{ .Values.global.clickhouseRootPassword }}"
  persistence:
    # -- Create/use Persistent Volume Claim for server component. Empty dir if false
    enabled: false

    # -- StorageClass to use for persistent volume. Requires clickhouse.persistence.enabled: true. If defined, PVC created automatically
    storageClass: ""

    # -- Array of access modes. Must match those of existing PV or dynamic provisioner. Ref: [http://kubernetes.io/docs/user-guide/persistent-volumes/](http://kubernetes.io/docs/user-guide/persistent-volumes/)
    accessModes:
      - ReadWriteOnce

    # -- Size of the volume. Should be calculated based on the metrics you send and retention policy you set.
    size: 1Gi

apo-collector:
  enabled: true
  initImage:
    repository: "{{ .Values.global.image.repository }}/busybox"
    pullPolicy: "{{ .Values.global.image.pullPolicy }}"
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.36.1"
  apoCollector:
    image:
      repository: "{{ .Values.global.image.repository }}/apo-collector"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
      tag: "v1.7.0"
    # resources: 
    #   limits:
    #     cpu: 1000m
    #     memory: 1024Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    service:
      type: NodePort
      port: 29090
      targetPort: 29090
      nodePortGrpc: 30044
      nodePortHttp: 30090
    config:
      victoriaMetricsUrl: "{{ .Values.global.victoriaMetricsUrl }}"
      clickhouseUrl: "{{ .Values.global.clickhouseUrl }}"
      clickhouseUsername: "{{ .Values.global.clickhouseRootUsername }}"
      clickhousePassword: "{{ .Values.global.clickhouseRootPassword }}"
      apmAdapterUrl: "apo-apm-adapter-svc:8079"
      apoBackendUrl: "http://apo-backend-svc:8080"

  apoApmAdapter:
    image:
      repository: "{{ .Values.global.image.repository }}/apm-adapter"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
      tag: "v1.7.0"
    # resources: 
    #   limits:
    #     cpu: 1000m
    #     memory: 1024Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    service:
      port: 8079
    config:
      adapter:
        # 暴露HTTP端口号.
        http_port: 8079
        # 设置HTTP请求超时时间，超时则直接返回.
        timeout: 10
        # APM系统对接.
        trace_api:
          # 开启apm对接列表
          apm_list: [skywalking, jaeger, elastic]
          # Skywalking配置
          skywalking:
            address: ""
            user: ""
            password: ""
          # Jaeger配置
          jaeger:
            address: apo-jaeger-collector-svc:16686/jaeger
          # Tingyun3相关配置
          nbs3:
            address: ""
            user: ""
            password: ""
          # Arms相关配置
          arms:
            address: "arms.cn-hangzhou.aliyuncs.com"
            access_key: ""
            access_secret: ""
          elastic:
            # 可以添加协议前缀'https://'或'http://'，默认http
            address: ""
            user: ""
            password: ""
          # Pinpoint配置
          pinpoint:
            address: ""

apo-front:
  enabled: true
  image:
    registry: "{{ .Values.global.image.repository }}"
    pullPolicy: "{{ .Values.global.image.pullPolicy }}"
    # Overrides the image tag whose default is the chart appVersion.
    tag: "v1.0.0"
  # resources: 
  #   limits:
  #     cpu: 1000m
  #     memory: 1024Mi
  #   requests:
  #     cpu: 100m
  #     memory: 128Mi
  service:
    type: NodePort
    nodePort: 31364
  config:
    apoJaegerCollectorUrl: "http://apo-jaeger-collector-svc:16686"
    apoGrafanaUrl: "http://apo-grafana-svc:80"
    apoBackendUrl: "http://apo-backend-svc:8080" 

apo-jaeger-collector:
  enabled: true
  initImage:
    repository: "{{ .Values.global.image.repository }}/busybox"
    pullPolicy: "{{ .Values.global.image.pullPolicy }}"
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.36.1"
  remoteStorage:
    image:
      repository: "{{ .Values.global.image.repository }}/jaeger-remote-storage"
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "v1.0.0"
    # resources: 
    #   limits:
    #     cpu: 1000m
    #     memory: 1024Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi

  jaegerQuery:
    image:
      repository: "{{ .Values.global.image.repository }}/jaeger-query"
      tag: 1.58
    # resources: 
    #   limits:
    #     cpu: 1000m
    #     memory: 1024Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi

  jaegerCollector:
    image:
      repository: "{{ .Values.global.image.repository }}/jaeger-collector"
      tag: "1.59-latest"
    # resources: 
    #   limits:
    #     cpu: 1000m
    #     memory: 1024Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
  config:
    clickhouseUrl: "{{ .Values.global.clickhouseUrl }}"
    clickhouseUsername: "{{ .Values.global.clickhouseRootUsername }}"
    clickhousePassword: "{{ .Values.global.clickhouseRootPassword }}"

apo-one-agent:
  enabled: false
  apoOneAgent:
    image:
      repository: "{{ .Values.global.image.repository }}/ebpf-agent"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
      # Overrides the image tag whose default is the chart appVersion.
      tag: "v1.7.3"
    resources: 
      limits:
        cpu: 1000m
        memory: 1024Mi
      requests:
        cpu: 100m
        memory: 128Mi
    config:
      apoCollectorUrl: apo-collector-svc.apo
      apoCollectorPort: "29090"
      javaAgentType: "opentelemetry"

  apoNodeAgent:
    image:
      repository: "{{ .Values.global.image.repository }}/node-agent"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
      # Overrides the image tag whose default is the chart appVersion.
      tag: "v1.7.0"
    resources:
      limits:
        cpu: 200m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    apoOtelCollectorUrl: "apo-otel-collector-gateway-svc:8080"

  apoIlogtail:
    image:
      repository: "{{ .Values.global.image.repository }}/ilogtail"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
      # Overrides the image tag whose default is the chart appVersion.
      tag: "v1.5.0"
    resources: 
      limits:
        cpu: 1000m
        memory: 1024Mi
      requests:
        cpu: 100m
        memory: 128Mi
    apoOtelCollectorGrpcUrl: "apo-otel-collector-gateway-svc:4315"
    apoVectorLogUrl: "apo-vector-svc:4310"

  grafanaAlloy:
    image:
      repository: "{{ .Values.global.image.repository }}/grafana-alloy"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
      # Overrides the image tag whose default is the chart appVersion.
      tag: "v1.4.2"
    resources: 
      limits:
        cpu: 2000m
        memory: 2048Mi
      requests:
        cpu: 100m
        memory: 128Mi
    config:
      apoOtelCollectorGrpcUrl: "apo-otel-collector-gateway-svc:4315"
      apoOtelCollectorHttpUrl: "apo-otel-collector-gateway-svc:4316"
  
  grafanaBeyla:
    enabled: true
    image:
      repository: "{{ .Values.global.image.repository }}/apo-beyla"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
      tag: "v1.8.4-1"
    resources: 
      limits:
        cpu: 1000m
        memory: 1024Mi
      requests:
        cpu: 100m
        memory: 128Mi
    config:
      k8sNamespace: "^/(/?/!apo$).*"

  odiglet:
    image:
      repository: "{{ .Values.global.image.repository }}/apo-odiglet"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
      tag: "v1.0.0"
      resources: 
        limits:
          cpu: 200m
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 128Mi
    apoOtelCollectorGrpcUrl: "apo-otel-collector-svc.{{ .Release.Namespace }}:4317"
    apoOtelCollectorHttpUrl: "apo-otel-collector-svc.{{ .Release.Namespace }}:4318"
    apoOtelCollectorSkywalkingUrl: "apo-otel-collector-svc.{{ .Release.Namespace }}:11800"

  apoOtelCollectorAgent:
    image:
      repository: "{{ .Values.global.image.repository }}/apo-otel-collector"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
      tag: "v1.0.0"
      resources: 
        limits:
          cpu: 2000m
          memory: 2048Mi
        requests:
          cpu: 100m
          memory: 128Mi
    config:
      apoCollectorUrl: "apo-collector-svc"
      apoCollectorPort: "29090"
      apoOtelCollectorUrl: "apo-otel-collector-gateway-svc"
      apoOtelCollectorGRPCPort: "4315"

  # ce 版本 originx-gc-agent不被启用
  originxGcAgent:
    image:
      repository: "{{ .Values.global.image.eeRepository }}/originx-gc-agent"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
      tag: "v1.4.1"
    resources:
      limits:
        cpu: 1000m
        memory: 1024Mi
      requests:
        cpu: 10m
        memory: 64Mi
    config:
      apoCollectorUrl: "apo-collector-svc"
      apoCollectorPort: "29090"

  odigos:
    enabled: true
    instrumentor:
      image:
        repository: "{{ .Values.global.image.repository }}/apo-odigos-instrumentor"
        imagePullPolicy: "{{ .Values.global.image.pullPolicy }}"
        tag: "v1.0.0"
      resources:
        limits:
          cpu: 1000m
          memory: 1024Mi
        requests:
          cpu: 10m
          memory: 64Mi
      # targetNamespace 
      # name：目标命名空间
      # value：
      #   enabled: 注入现有的所有服务,但不注入后续新增应用
      #   enabledFuture: 注入现在以及后续的所有服务
      #   disabled: 不注入指定namespace下的服务,用于在instrument-all-namespace时忽略特定的Namespace
      # targetNamespace:
      # - name: default
      #   value: disabled
      # instrument-all-namespace 是否注入所有namespace
      # 等价于设置所有namespace的enabledFuture
      # 但如果已经设置了ns或者workload的disabled将不会注入
      instrumentAllNamespace: true
      # force-instrument-all-namespace 是否强制注入所有namespace
      # 和instrument-all-namespace类似,所有ns设置enabledFuture
      # 并忽略所有disabled设置
      forceInstrumentAllNamespace: false
    config:
      apoOtelCollectorGrpcUrl: "apo-otel-collector-gateway-svc.{{ .Release.Namespace }}:4315"
      apoOtelCollectorHttpUrl: "apo-otel-collector-gateway-svc.{{ .Release.Namespace }}:4316"
      apoOtelCollectorSkywalkingUrl: "apo-otel-collector-gateway-svc.{{ .Release.Namespace }}:11800"
      javaAgentType: "opentelemetry"

  apo-nginx-proxy:
    enabled: false
    image:
      repository: "{{ .Values.global.image.repository }}/nginx"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
      # Overrides the image tag whose default is the chart appVersion.
      tag: "stable-alpine3.20"

  apo-otel-collector:
    enabled: false

apo-otel-collector-gateway:
  enabled: true
  initImage:
    repository: "{{ .Values.global.image.repository }}/busybox"
    pullPolicy: "{{ .Values.global.image.pullPolicy }}"
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.36.1"
  image:
    repository: "{{ .Values.global.image.repository }}/apo-otel-collector"
    pullPolicy: "{{ .Values.global.image.pullPolicy }}"
    # Overrides the image tag whose default is the chart appVersion.
    tag: "v1.0.0"
  config:
    apoBackendUrl: "apo-backend-svc"
    apoBackendPort: "8080"
    jaegerCollectorUrl: "http://apo-jaeger-collector-svc:4317"
    victoriaMetricsUrl: "{{ .Values.global.victoriaMetricsUrl }}"
    clickhouseUrl: "{{ .Values.global.clickhouseUrl }}"
    clickhouseUsername: "{{ .Values.global.clickhouseRootUsername }}"
    clickhousePassword: "{{ .Values.global.clickhouseRootPassword }}"
  serviceNodePort:
    ports:
    - name: otlpgrpc
      protocol: TCP
      port: 4317
      targetPort: 4317
      nodePort: 30317
    - name: otlpk8s
      protocol: TCP
      port: 4319
      targetPort: 4319
      nodePort: 30319
    type: NodePort
  resources: 
    limits:
      cpu: 3000m
      memory: 3072Mi
    requests:
      cpu: 100m
      memory: 128Mi
  rbac:
    create: true

altinity-clickhouse-operator:
  enabled: true
  operator:
    image:
      # operator.image.repository -- image repository
      repository: "{{ .Values.global.image.repository }}/clickhouse-operator"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
  metrics:
    enabled: true
    image:
      # metrics.image.repository -- image repository
      repository: "{{ .Values.global.image.repository }}/metrics-exporter"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
  clickhouse:
    image:
      repository: "{{ .Values.global.image.repository }}/clickhouse-server"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
    username: "{{ .Values.global.clickhouseRootUsername }}"
    password: "{{ .Values.global.clickhouseRootPassword }}"
    persistence:
      # -- Create/use Persistent Volume Claim for server component. Empty dir if false
      enabled: false
      
      data:
        # -- Array of access modes. Must match those of existing PV or dynamic provisioner. Ref: [http://kubernetes.io/docs/user-guide/persistent-volumes/](http://kubernetes.io/docs/user-guide/persistent-volumes/)
        accessModes:
          - ReadWriteOnce

        # -- StorageClass to use for persistent volume. Requires clickhouse.persistence.enabled: true. If defined, PVC created automatically
        storageClass: ""

        # -- Bind Persistent Volume by labels. Must match all labels of targeted PV.
        matchLabels: {}

        # -- Size of the volume. Should be calculated based on the metrics you send and retention policy you set.
        size: 16Gi
      
      log:
        # -- Array of access modes. Must match those of existing PV or dynamic provisioner. Ref: [http://kubernetes.io/docs/user-guide/persistent-volumes/](http://kubernetes.io/docs/user-guide/persistent-volumes/)
        accessModes:
          - ReadWriteOnce

        # -- StorageClass to use for persistent volume. Requires clickhouse.persistence.enabled: true. If defined, PVC created automatically
        storageClass: ""

        # -- Bind Persistent Volume by labels. Must match all labels of targeted PV.
        matchLabels: {}

        # -- Size of the volume. Should be calculated based on the metrics you send and retention policy you set.
        size: 1Gi

grafana:
  enabled: true
  image:
    registry: "{{ .Values.global.image.repository }}"
    # -- Docker image repository
    repository: grafana
    # Overrides the Grafana image tag whose default is the chart appVersion
    tag: "10.4.1"
    pullPolicy: "{{ .Values.global.image.pullPolicy }}"
  extraInitContainers: 
  - name: apo-grafana-init-dashboard
    image: "{{ .Values.global.image.repository }}/apo-grafana-init-dashboards:v1.0.0"
    imagePullPolicy: "{{ .Values.global.image.pullPolicy }}"
    volumeMounts:
    - name: apo-dashboards
      mountPath: /tmp/dashboards
  datasources: 
    datasources.yaml:
      apiVersion: 1
      datasources: 
      - name: APO-VictoriaMetric
        type: prometheus
        url: "{{ .Values.global.victoriaMetricsUrl }}"
        access: proxy
        isDefault: true
        uid: APO-VictoriaMetric
  grafana.ini:
    server:
      domain: "localhost"
  # resources: 
  #   limits:
  #     cpu: 1000m
  #     memory: 1024Mi
  #   requests:
  #     cpu: 100m
  #     memory: 128Mi
  rbac:
    create: false

originx-copilot-ai:
  enabled: true
  image:
    registry: "{{ .Values.global.image.eeRepository }}"
    repository: originx-copilot
    tag: "v1.0.0"
    pullPolicy: "{{ .Values.global.image.pullPolicy }}"
  resources:
    limits:
      cpu: 1000m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 128Mi
  service:
    type: ClusterIP
    port: 10088
    targetPort: 10088
    nodePort: null
  config:
    apoBackendUrl: http://apo-backend-svc:8080
    apoPolarisBackendUrl: http://apo-polaris-analyzer-svc:5000
    originxRootCauseInferUrl: http://originx-root-cause-infer-svc:8080

originx-root-cause-infer:
  enabled: true
  initImage:
    repository: "{{ .Values.global.image.repository }}/busybox"
    pullPolicy: "{{ .Values.global.image.pullPolicy }}"
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.36.1"
  image:
    repository: "{{ .Values.global.image.eeRepository }}/root-cause-infer"
    tag: "v1.6.2"
    pullPolicy: "{{ .Values.global.image.pullPolicy }}"
  resources: 
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

vector:
  enabled: true
  image:
    repository: "{{ .Values.global.image.repository }}/vector"
    tag: "0.41.1-distroless-libc"
    pullPolicy: "{{ .Values.global.image.pullPolicy }}"
  service:
    type: NodePort
    ports:
    - name: datadog-agent
      port: 4310
      targetPort: 4310
      nodePort: 30310
      protocol: TCP
  resources: 
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 2000m
      memory: 2048Mi
  role: Stateless-Aggregator
  fullnameOverride: "apo-vector"
  clickhouseUrl: "{{ .Values.global.clickhouseUrl }}"
  clickhouseUsername: "{{ .Values.global.clickhouseRootUsername }}"
  clickhousePassword: "{{ .Values.global.clickhouseRootPassword }}"

victoria-metrics-alert:
  enabled: true
  server:
    image:
      repository: "{{ .Values.global.image.repository }}/vmalert"
      # Overrides the image tag whose default is the chart appVersion.
      tag: "v1.102.0"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
    datasource:
      url: "{{ .Values.global.victoriaMetricsUrl }}"
    # resources:
    #   limits:
    #     cpu: 1000m
    #     memory: 1024Mi
    #   requests:
    #     cpu: 500m
    #     memory: 512Mi
  alertmanager:
    enabled: true
    image: "{{ .Values.global.image.repository }}/alertmanager"
    tag: v0.25.0
    extraContainers:
    - name: alertmanager-configmap-reload
      image: "{{ .Values.global.image.repository }}/alertmanager-configmap-reload:v0.9.0"
      imagePullPolicy: "{{ .Values.global.image.pullPolicy }}"
      args:
        - '--volume-dir=/config'
        - '--webhook-url=http://127.0.0.1:9093/-/reload'
      volumeMounts:
        - name: config
          readOnly: true
          mountPath: /config
    config:
      global:
          resolve_timeout: 5m
          http_config:
              follow_redirects: true
              enable_http2: true
          smtp_hello: localhost
          smtp_require_tls: true
          pagerduty_url: https://events.pagerduty.com/v2/enqueue
          opsgenie_api_url: https://api.opsgenie.com/
          wechat_api_url: https://qyapi.weixin.qq.com/cgi-bin/
          victorops_api_url: https://alert.victorops.com/integrations/generic/20131114/alert/
          telegram_api_url: https://api.telegram.org
          webex_api_url: https://webexapis.com/v1/messages
      route:
          receiver: 根告警
          group_by:
              - alertname
          continue: false
          routes:
              - receiver: APO异常检测告警
                matchers: 
                - group=~"mutation.*"
                continue: false
              - receiver: alert-collector
                continue: true
          group_wait: 30s
          group_interval: 1m
          repeat_interval: 30m
      receivers:
          - name: 根告警
          - name: APO异常检测告警
            webhook_configs:
              - send_resolved: true
                http_config:
                  follow_redirects: true
                  enable_http2: true
                url: http://apo-backend-svc:8080/api/alerts/inputs/alertmanager
                max_alerts: 0
          - name: alert-collector
            webhook_configs:
              - send_resolved: true
                http_config:
                  follow_redirects: true
                  enable_http2: true
                url: http://apo-backend-svc:8080/api/alerts/inputs/alertmanager
                max_alerts: 0
  rbac:
    create: false

victoria-metrics-single:
  enabled: true
  server:
    image:
      repository: "{{ .Values.global.image.repository }}/victoria-metrics"
      # Overrides the image tag whose default is the chart appVersion.
      tag: "v1.101.0"
      pullPolicy: "{{ .Values.global.image.pullPolicy }}"
    # persistentVolume:
    #   enabled: "{{ .Values.global.persistentVolume.enabled }}"
    service:
      type: ClusterIP
      # nodePort: 30428
    persistentVolume:
      # -- Create/use Persistent Volume Claim for server component. Empty dir if false
      enabled: false

      # -- Array of access modes. Must match those of existing PV or dynamic provisioner. Ref: [http://kubernetes.io/docs/user-guide/persistent-volumes/](http://kubernetes.io/docs/user-guide/persistent-volumes/)
      accessModes:
        - ReadWriteOnce
      # -- Persistant volume annotations
      annotations: {}

      # -- StorageClass to use for persistent volume. Requires server.persistentVolume.enabled: true. If defined, PVC created automatically
      storageClass: ""

      # -- Existing Claim name. If defined, PVC must be created manually before volume will be bound
      existingClaim: ""

      # -- Bind Persistent Volume by labels. Must match all labels of targeted PV.
      matchLabels: {}

      # -- Mount path. Server data Persistent Volume mount root path.
      mountPath: /storage
      # -- Mount subpath
      subPath: ""
      # -- Size of the volume. Should be calculated based on the metrics you send and retention policy you set.
      size: 16Gi
    # resources:
    #   limits:
    #     cpu: 2000m
    #     memory: 2048Mi
    #   requests:
    #     cpu: 500m
    #     memory: 512Mi
  rbac:
    create: false
  