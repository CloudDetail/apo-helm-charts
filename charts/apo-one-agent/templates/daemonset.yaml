{{- if or (not .Values.global.clusterId) (eq .Values.global.clusterId "") }}
  {{- fail "Error .Values.global.clusterId must be defined and non-empty!" }}
{{- end }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "apo-one-agent.fullname" . }}
  labels:
    {{- include "apo-one-agent.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "apo-one-agent.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/apo-grafana-alloy-config: {{ include (print $.Template.BasePath "/apo-grafana-alloy-configmap.yaml") . | sha256sum }}
        checksum/apo-grafana-beyla-config: {{ include (print $.Template.BasePath "/apo-grafana-beyla-configmap.yaml") . | sha256sum }}
        checksum/apo-ilogtail-logger-config: {{ include (print $.Template.BasePath "/apo-ilogtail-logger-configmap.yaml") . | sha256sum }}
        checksum/apo-ilogtail-user-config: {{ include (print $.Template.BasePath "/apo-ilogtail-user-configmap.yaml") . | sha256sum }}
        checksum/apo-node-agent-config: {{ include (print $.Template.BasePath "/apo-node-agent-configmap.yaml") . | sha256sum }}
        checksum/apo-odigos-own-telemetry-otel-config: {{ include (print $.Template.BasePath "/apo-odigos-own-telemetry-otel-config.yaml") . | sha256sum }}
        checksum/apo-one-agent-config: {{ include (print $.Template.BasePath "/apo-one-agent-configmap.yaml") . | sha256sum }}
        checksum/apo-otel-collector-agent-config: {{ include (print $.Template.BasePath "/apo-otel-collector-agent-configmap.yaml") . | sha256sum }}
        checksum/apo-profile-agent-config: {{ include (print $.Template.BasePath "/apo-profile-agent-configmap.yaml") . | sha256sum }}
        checksum/apo-vmagent-config: {{ include (print $.Template.BasePath "/apo-vmagent-configmap.yaml") . | sha256sum }}
      labels:
        {{- include "apo-one-agent.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      hostNetwork: true
      hostPID: true
      dnsPolicy: {{ tpl .Values.dnsPolicy . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      serviceAccountName: {{ include "apo-one-agent.serviceAccountName" . }}
      containers:
        {{- if and .Values.apoOneAgent.enabled (or (has "trace" .Values.global.agentCollectorMode) (has "trace-collector" .Values.global.agentCollectorMode) (has "trace-sidecar" .Values.global.agentCollectorMode) (has "no-trace" .Values.global.agentCollectorMode)) }}
        - name: ebpf-agent
          image: "{{ tpl .Values.apoOneAgent.image.repository . }}:{{ tpl (toString (default .Chart.AppVersion .Values.apoOneAgent.image.tag)) . }}"
          imagePullPolicy: "{{ tpl .Values.apoOneAgent.image.pullPolicy . }}"
          ports:
            - hostPort: 9500
              containerPort: 9500
              protocol: TCP
          resources:
            {{- toYaml .Values.apoOneAgent.resources | nindent 12 }}
          {{- include "apo-one-agent.envAndVolume" . | nindent 10 }}
          securityContext:
            privileged: true
        {{- end }}
        {{- if and .Values.apoOneAgent.enabled (or (has "trace" .Values.global.agentCollectorMode) (has "trace-collector" .Values.global.agentCollectorMode) (has "trace-sidecar" .Values.global.agentCollectorMode) (has "no-trace" .Values.global.agentCollectorMode)) }}
        - name: node-agent
          image: "{{ tpl .Values.apoNodeAgent.image.repository . }}:{{ tpl (toString .Values.apoNodeAgent.image.tag) . }}"
          imagePullPolicy: "{{ tpl .Values.apoNodeAgent.image.pullPolicy . }}"
          ports:
            - hostPort: 9408
              containerPort: 9408
              protocol: TCP
          env:
            - name: MY_NODE_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          resources:
            {{- toYaml .Values.apoNodeAgent.resources | nindent 12 }}
          volumeMounts:
            - name: apo-node-agent-config
              mountPath: /app/config.yaml
              subPath: config.yaml
          securityContext:
            privileged: true
        {{- end }}
        {{- if or (has "log" .Values.global.agentCollectorMode) (has "log-sample" .Values.global.agentCollectorMode) }}
        - name: ilogtail
          image: "{{ tpl .Values.apoIlogtail.image.repository . }}:{{ tpl (toString .Values.apoIlogtail.image.tag) . }}"
          imagePullPolicy: "{{ tpl .Values.apoIlogtail.image.pullPolicy . }}"
          env:
            - name: LOGTAIL_MODE
              value: "true"
            - name: cluster_id
              value: {{ .Values.global.clusterId | quote }}
            - name: HOST_DIR
              value: /logtail_host
            - name: ALIYUN_LOG_ENV_TAGS
              value: _node_name_|_node_ip_|cluster_id
            - name: _node_name_
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: _node_ip_
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
            - name: cpu_usage_limit
              value: '1'
            - name: mem_usage_limit
              value: '512'
          resources:
            {{- toYaml .Values.apoIlogtail.resources | nindent 12 }}
          volumeMounts:
            - name: run
              mountPath: /var/run
            - name: root
              readOnly: true
              mountPath: /logtail_host
              mountPropagation: HostToContainer
            - name: checkpoint
              mountPath: /usr/local/loongcollector/checkpoint
            - name: signal-uds
              mountPath: /opt/signal
            - name: apo-ilogtail-user-config
              mountPath: /usr/local/loongcollector/config/local
              readOnly: true
            - name: apo-ilogtail-logger-config
              mountPath: /usr/local/loongcollector/conf/plugin_logger.xml
              subPath: plugin_logger.xml
        {{- end }}
        {{- if has "metrics" .Values.global.agentCollectorMode }}
        - name: grafana-alloy
          image: "{{ tpl .Values.grafanaAlloy.image.repository . }}:{{ tpl (toString .Values.grafanaAlloy.image.tag) . }}"
          imagePullPolicy: "{{ tpl .Values.grafanaAlloy.image.pullPolicy . }}"
          args:
            - run
            - /etc/alloy/config.alloy
            - '--storage.path=/tmp/alloy'
            - '--server.http.listen-addr=0.0.0.0:12345'
            - '--server.http.ui-path-prefix=/'
            - '--stability.level=generally-available'
          ports:
            - name: http-metrics
              hostPort: 12345
              containerPort: 12345
              protocol: TCP
          env:
            - name: ALLOY_DEPLOY_MODE
              value: helm
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: MY_NODE_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
          resources:
            {{- toYaml .Values.grafanaAlloy.resources | nindent 12 }}
          securityContext:
            privileged: true
          volumeMounts:
            - name: grafana-alloy-config
              mountPath: /etc/alloy
            - name: root
              mountPath: /host/rootfs
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 12345
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
        {{- end }}
        {{- if and (has "trace" .Values.global.agentCollectorMode) (eq .Values.grafanaBeyla.enabled true) }}
        - name: grafana-beyla
          image: "{{ tpl .Values.grafanaBeyla.image.repository . }}:{{ tpl (toString .Values.grafanaBeyla.image.tag) . }}"
          imagePullPolicy: "{{ tpl .Values.grafanaBeyla.image.pullPolicy . }}"
          ports:
            - containerPort: 9090
              name: metrics
              protocol: TCP
          env:
            - name: filter_go_process
              value: >-
                sleep,kube,jaeger-agent,prometheus,promtail,grafana-agent,calico,apisix,kube,chaos-,logserver,containerd,image-cri-shim,registry,deepflow,grafanagpx_,docker,runc,lvscare,nginx-ingress-c,otelcol-contrib,node_exporter,otel-go-instrum,otelcol,vmagent-prod,metrics-server,apm-server,elastic-operato,flanneld,flagd-build,dlv,gopls,agent-linux,all-in-one-linu,coredns,etcd,kubectl,kubelet,kindnetd,local-path-prov,camera,ilogtail,management,metadata-provid,meta-agent,originx-gc-agen,originx-sdk-aut,pinger,portal,root-cause-infe,inspector,odiglet,odigosotelcol,exporter,ndm,ndo,provisioner-loc,catalog,olm,xenon,victoria-metric,camera,nginx,alloy,alertmanager,grafana,collector-linux,apo-backend,vector,clickhouse-operator,clickhouse-server,jaeger-remote-storage,apiserver,java,clickhouse,victoria-metrics-prod,node-agent,python,vmalert-prod,query-linux,odigos-instrumentor
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
            - name: BEYLA_CONFIG_PATH
              value: /etc/beyla/config/beyla-config.yml
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: http://$(NODE_IP):4317
            - name: OTEL_EXPORTER_OTLP_PROTOCOL
              value: grpc
          resources:
            {{- toYaml .Values.grafanaBeyla.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /etc/beyla/config
              name: beyla-config
              readOnly: true
          readinessProbe:
            exec:
              command:
                - cat
                - /opt/beyla-support
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          securityContext:
            privileged: true
        {{- end }}
        {{- if (has "trace" .Values.global.agentCollectorMode) }}
        - name: apo-odiglet
          image: "{{ tpl .Values.odiglet.image.repository . }}:{{ .Values.odiglet.image.tag }}"
          imagePullPolicy: "{{ tpl .Values.odiglet.image.pullPolicy . }}"
          env:
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: APO_COLLECTOR_GRPC_ENDPOINT
              value: http://$(NODE_IP):4317
            - name: APO_COLLECTOR_HTTP_ENDPOINT
              value: http://$(NODE_IP):4318
            - name: APO_COLLECTOR_SKYWALKING_ENDPOINT
              value: $(NODE_IP):11800
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CURRENT_NS
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: OTEL_TRACES_EXPORTER
              value: otlp
            - name: OTEL_LOG_LEVEL
              value: info
          envFrom:
            - configMapRef:
                name: apo-odigos-own-telemetry-otel-config
                optional: true
          resources:
            {{- toYaml .Values.odiglet.resources | nindent 12 }}
          securityContext:
            privileged: true
            capabilities:
              add:
                - SYS_PTRACE
          volumeMounts:
            - name: run-dir
              mountPath: /run
            - name: device-plugins-dir
              mountPath: /var/lib/kubelet/device-plugins
            - name: pod-resources
              mountPath: /var/lib/kubelet/pod-resources
              readOnly: true
            - name: odigos
              mountPath: /var/odigos
              readOnly: false
            - name: kernel-debug
              mountPath: /sys/kernel/debug
        {{- end }}
        {{- if and (not (has "no-trace" .Values.global.agentCollectorMode)) (or (has "trace" .Values.global.agentCollectorMode) (has "metrics" .Values.global.agentCollectorMode) (has "trace-collector" .Values.global.agentCollectorMode)) }}
        - name: apo-otel-collector-agent
          image: "{{ tpl .Values.apoOtelCollectorAgent.image.repository . }}:{{ .Values.apoOtelCollectorAgent.image.tag }}"
          imagePullPolicy: "{{ tpl .Values.apoOtelCollectorAgent.image.pullPolicy . }}"
          command:
            - ./otelcol
            - '--config'
            - /app/conf/otelcol-config.yaml
          args:
            - >-
              --feature-gates=receiver.prometheusreceiver.RemoveLegacyResourceAttributes
          env:
            - name: MY_NODE_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          resources: {}
          volumeMounts:
            - name: apo-otel-collector-agent-config
              mountPath: /app/conf
            - name: signal-uds
              mountPath: /opt/signal
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        {{- end }}
        {{- if eq .Values.global.edition "ee" }}
        {{- if and .Values.apoOneAgent.enabled (or (has "trace" .Values.global.agentCollectorMode) (has "trace-collector" .Values.global.agentCollectorMode) (has "trace-sidecar" .Values.global.agentCollectorMode)) }}
        - name: originx-gc-agent
          image: "{{ tpl .Values.originxGcAgent.image.repository . }}:{{ .Values.originxGcAgent.image.tag }}"
          imagePullPolicy: "{{ tpl .Values.originxGcAgent.image.pullPolicy . }}"
          env:
            - name: RECEIVER_HOST
              value: "{{ tpl .Values.originxGcAgent.config.apoCollectorUrl . }}"
            - name: RECEIVER_PORT
              value: "{{ tpl .Values.originxGcAgent.config.apoCollectorPort . }}"
            - name: MY_NODE_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          resources:
            {{- toYaml .Values.originxGcAgent.resources | nindent 12 }}
          volumeMounts:
            - name: apo-one-agent-config
              mountPath: /app/config
            - name: signal-uds
              mountPath: /opt/signal
          securityContext:
            privileged: true
        {{- end }}
        {{- end }}
        {{- if eq .Values.global.edition "ee" }}
        {{- if or (or (has "trace" .Values.global.agentCollectorMode) (has "trace-collector" .Values.global.agentCollectorMode)) (has "trace-sidecar" .Values.global.agentCollectorMode) }}
        - name: profile-agent
          image: "{{ tpl .Values.profileAgent.image.repository . }}:{{ .Values.profileAgent.image.tag }}"
          ports:
            - containerPort: 19005
              protocol: TCP
          env:
            - name: MY_NODE_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          resources:
            {{- toYaml .Values.profileAgent.resources | nindent 12 }}
          volumeMounts:
            - name: apo-profile-agent-config
              mountPath: /app/profile-agent.yml
              subPath: profile-agent.yml
          securityContext:
            privileged: true
        {{- end }}
        {{- end }}
        - name: vmagent
          image: "{{ tpl .Values.vmagent.image.repository . }}:{{ .Values.vmagent.image.tag }}"
          imagePullPolicy: "{{ tpl .Values.vmagent.image.pullPolicy . }}"
          resources:
            {{- toYaml .Values.vmagent.resources | nindent 12 }}
          args:
            - '-promscrape.config=/config/scrape.yml'
            - '-remoteWrite.url={{ tpl .Values.vmagent.remoteWriteUrls . }}/metrics'
            - '-envflag.enable=true'
            - '-envflag.prefix=VM_'
            - '-envflag.enable=true'
            - '-loggerFormat=json'
            - '-enableTCP6=true'
            - '-promscrape.maxScrapeSize=33554432'
            - '-promscrape.suppressScrapeErrorsDelay=5m'
          env:
            - name: VM_HOSTNAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: VM_MY_NODE_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
          workingDir: /
          volumeMounts:
            - name: vmagent-tmpdata
              mountPath: /tmpData
            - name: vmagent-config
              mountPath: /config
          securityContext:
            privileged: true
      volumes:
        - name: apo-one-agent-config
          configMap:
            name: {{ include "apo-one-agent.fullname" . }}-config
            defaultMode: 420
        - name: apo-ilogtail-user-config
          configMap:
            name: apo-ilogtail-user-config
            defaultMode: 420
        - name: apo-ilogtail-logger-config
          configMap:
            name: apo-ilogtail-logger-config
            defaultMode: 420
        - name: apo-node-agent-config
          configMap:
            name: apo-node-agent-config
            defaultMode: 420
        - name: grafana-alloy-config
          configMap:
            name: apo-grafana-alloy-config
            defaultMode: 420
        - name: beyla-config
          configMap:
            name: apo-grafana-beyla-config
            defaultMode: 420
        - name: apo-otel-collector-agent-config
          configMap:
            name: apo-otel-collector-agent-config
            defaultMode: 420
        - name: apo-profile-agent-config
          configMap:
            name: apo-profile-agent-config
            defaultMode: 420
        - name: vmagent-config
          configMap:
            name: apo-vmagent-config
            defaultMode: 420
        - name: vmagent-tmpdata
          emptyDir: {}
        - name: modprobe-d
          hostPath:
            path: /etc/modprobe.d
            type: ''
        - name: dshm
          emptyDir:
            medium: Memory
        - name: dev-vol
          hostPath:
            path: /dev
            type: ''
        - name: proc-vol
          hostPath:
            path: /proc
            type: ''
        - name: etc-vol
          hostPath:
            path: /etc
            type: ''
        - name: boot-vol
          hostPath:
            path: /boot
            type: ''
        - name: modules-vol
          hostPath:
            path: /lib/modules
            type: ''
        - name: usr-vol
          hostPath:
            path: /usr
            type: ''
        - name: run-vol
          hostPath:
            path: /run
            type: ''
        - name: varrun-vol
          hostPath:
            path: /var/run
            type: ''
        - name: sys-vol
          hostPath:
            path: /sys
            type: ''
        - name: signal-uds
          emptyDir:
            medium: Memory
        - name: run
          hostPath:
            path: /var/run
            type: Directory
        - name: root
          hostPath:
            path: /
            type: Directory
        - name: checkpoint
          hostPath:
            path: /etc/ilogtail-ilogtail-ds/checkpoint
            type: DirectoryOrCreate
        - name: run-dir
          hostPath:
            path: /run
        - name: pod-resources
          hostPath:
            path: /var/lib/kubelet/pod-resources
        - name: device-plugins-dir
          hostPath:
            path: /var/lib/kubelet/device-plugins
        - name: odigos
          hostPath:
            path: /var/odigos
        - name: kernel-debug
          hostPath:
            path: /sys/kernel/debug
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- else if .Values.global.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.global.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      {{- with .Values.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- else if .Values.global.affinity }}
      {{- with .Values.global.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- else if .Values.global.tolerations }}
      tolerations:
{{ toYaml .Values.global.tolerations | indent 8 }}
      {{- end }}
